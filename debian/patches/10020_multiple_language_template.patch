diff -r 475d79e77fa0 cgi/Makefile.in
--- a/cgi/Makefile.in
+++ b/cgi/Makefile.in
@@ -29,7 +29,7 @@
 CFLAGS=      ${DEFS} ${OPTOPTS} @CFLAGS@ ${INCPATH}
 
 
-OBJ     = network.o subfile.o ../common/mkcookie.o ../common/fbase64.o \
+OBJ     = network.o subfile.o lang.o ../common/mkcookie.o ../common/fbase64.o \
 	../common/config.o ../common/wildcard.o ../common/argcargv.o \
 	../version.o 
 TARGETS = logout cosign.cgi
diff -r 475d79e77fa0 cgi/lang.c
--- /dev/null
+++ b/cgi/lang.c
@@ -0,0 +1,90 @@
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+
+#include "lang.h"
+
+char **
+get_accept_language()
+{
+    char *accept_language=NULL;
+    char *p, *pnext, *buff;
+    char **lang;
+    int found = 0;
+    int i;
+    int _INIT_SIZE=3;
+
+    lang = calloc(sizeof(char*),_INIT_SIZE+1);
+    for (i=0; i<_INIT_SIZE; i++)
+        lang[i]=NULL;
+
+    accept_language = getenv( "HTTP_ACCEPT_LANGUAGE" );
+    p = accept_language;
+
+    if (p != NULL)
+    {
+        while(1)
+        {
+            int i=0;
+            while (1)
+            {
+                char c = *(p+i);
+                if ( c=='\0' || c== ';' || c==',')
+                    break;
+                i++;
+            }
+            if (i>0)
+                buff = strndup(p,i);
+            else
+                buff = NULL;
+
+            if (buff!=NULL)
+            {
+                if (strcmp(buff, "zh-cn")==0 || strcmp(buff, "zh_cn")==0)
+                {
+                    free(buff);
+                    buff = strdup("zh");
+                }
+                else if (strncmp(buff, "en", 2)==0)
+                {
+                    free(buff);
+                    buff = strdup("en");
+                }
+                found = 0;
+                for (i=0; i< _INIT_SIZE; i++)
+                {
+                    if (lang[i]!=NULL && buff !=NULL && strcmp(lang[i],buff)==0)
+                    {
+                        found = 1;
+                        break;
+                    }
+                    else if (lang[i] == NULL)
+                    {
+                        break;
+                    }
+                }
+                if (!found)
+                {
+                    if (i==_INIT_SIZE)
+                    {
+                        _INIT_SIZE = _INIT_SIZE * 2 + 1;
+                        lang = realloc(lang, _INIT_SIZE * sizeof(char *));
+                    }
+                    lang[i] = buff;
+                    lang[i+1] = NULL;
+                }
+            }
+
+            pnext = strchr(p, ',');
+            if (pnext)
+                p = pnext+1;
+            else
+                break;
+        }
+    }
+    for(i=0; i< _INIT_SIZE; i++)
+    {
+        fprintf(stderr, "lang[%d] = %s\n", i, lang[i]);
+    }
+    return lang;
+}
diff -r 475d79e77fa0 cgi/lang.h
--- /dev/null
+++ b/cgi/lang.h
@@ -0,0 +1,11 @@
+/*
+ * Copyright (c) 2008 JiangXin, worldhello.net AT gmail.com
+ * All Rights Reserved.  See LICENSE.
+ */
+
+#ifndef _LANG_H
+#define _LANG_H
+
+char ** get_accept_language();
+
+#endif
diff -r 475d79e77fa0 cgi/subfile.c
--- a/cgi/subfile.c
+++ b/cgi/subfile.c
@@ -3,14 +3,50 @@
 #include <string.h>
 
 #include "subfile.h"
+#include "lang.h"
+#include <unistd.h>
+
+#include <libgen.h>
+#include <glob.h>
 
     void
 subfile( char *filename, struct subfile_list *sl, int nocache )
 {
     FILE	*fs;
+    FILE	*finc;
     int 	c, i, j;
     char	nasties[] = "<>(){}[]'`\" \\";
 
+    char	**lang;
+    char	*filename_i18n;
+    char	*pbuff = NULL;
+    char	*pdir;
+    int tmplen = 0;
+
+    tmplen = strlen(filename)+5;
+    filename_i18n = malloc(tmplen+1);
+    lang = get_accept_language();
+    while(*lang !=NULL)
+    {
+        if (strlen(*lang)+1+strlen(filename) > tmplen)
+        {
+            tmplen +=5;
+            filename_i18n=realloc(filename_i18n,tmplen+1);
+        }
+        snprintf(filename_i18n, tmplen, "%s/%s", *lang, filename);
+        fprintf(stderr, "filename: %s\n", filename_i18n);
+        if (access(filename_i18n, F_OK)==0)
+        {
+            filename = filename_i18n;
+            break;
+        }
+        else if (strcmp(*lang, "en")==0)
+        {
+            break;
+        }
+        lang++;
+    }
+
     if ( nocache ) {
 	fputs( "Expires: Mon, 16 Apr 1973 13:10:00 GMT\n"
 		"Last-Modified: Mon, 16 Apr 1973 13:10:00 GMT\n"
@@ -26,6 +62,9 @@
 	exit( 1 );
     }
 
+    pbuff = strdup(filename);
+    pdir = dirname (pbuff);
+
     while (( c = getc( fs )) != EOF ) {
 	if ( c == '$' ) {
 	    if (( c = getc( fs )) == EOF ) {
@@ -37,6 +76,71 @@
 		putchar( c );
 		continue;
 	    }
+	if ( c == '!' ) {
+		char *s = malloc(9);
+		char *incfile = malloc(255);
+		fgets(s, 9, fs);
+		if (strncmp(s, "include(", 8) == 0)
+		{
+			strcpy(incfile, pdir);
+			strcat(incfile, "/");
+			i = strlen(incfile)-1;
+    			while (( c = getc( fs )) != EOF && i++ < 254 ) {
+				if (c==')')
+					break;
+				incfile[i] = c;
+			}
+			incfile[i] = '\0';
+			if (c==')')
+			{
+				if ( (access(incfile, F_OK)==0) && (finc = fopen( incfile, "r" )) != NULL ) {
+					while (( c = getc( finc )) != EOF ) {
+						putchar( c );
+					}
+					fclose(finc);
+				}
+				else
+				{
+					glob_t globfiles;
+					if ( glob(incfile, 0, NULL, &globfiles) == 0)
+					{
+						for (i=0; i< globfiles.gl_pathc; i++)
+						{
+							if ( (access(globfiles.gl_pathv[i], F_OK)==0) &&
+							     (finc = fopen( globfiles.gl_pathv[i], "r" )) != NULL )
+							{
+								while (( c = getc( finc )) != EOF ) {
+									putchar( c );
+								}
+								fclose(finc);
+							}
+						}
+						globfree(&globfiles);
+					}
+				}
+			}
+			else
+			{
+				printf ("include(%s", incfile+strlen(pdir)+1);
+				if (c != EOF)
+					putchar( c );
+			}
+		}
+		else
+		{
+			putchar( '$' );
+			putchar( c );
+			fseek(fs, -1*strlen(s), SEEK_CUR);
+		}
+		if (s != NULL)
+			free(s);
+		if (incfile != NULL)
+			free(incfile);
+		s = NULL;
+		incfile = NULL;
+		continue;
+	}
+
 
 	    for ( i = 0; sl[ i ].sl_letter != '\0'; i++ ) {
 		if ( sl[ i ].sl_letter == c ) {
@@ -73,5 +177,11 @@
 	perror( filename );
     }
 
+    if (filename_i18n != NULL)
+        free(filename_i18n);
+    if (pbuff != NULL)
+        free(pbuff);
     return;
 }
+
+/* vim: set noet ts=8 sw=8 : */
