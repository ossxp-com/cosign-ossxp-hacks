From: Jiang Xin <worldhello.net@gmail.com>
Subject: [PATCH] t/bugfix_cosign_httponly_quirk

<patch description>

Signed-off-by: Jiang Xin <worldhello.net@gmail.com>

---
 filters/apache/mod_cosign.c   | 37 ++++++++++++++++---------------------
 filters/apache2/mod_cosign.c  | 41 ++++++++++++++++++-----------------------
 filters/lighttpd/mod_cosign.c |  6 ++++--
 3 files changed, 38 insertions(+), 46 deletions(-)

diff --git a/filters/apache/mod_cosign.c b/filters/apache/mod_cosign.c
index 470c888..e7e0e39 100755
--- a/filters/apache/mod_cosign.c
+++ b/filters/apache/mod_cosign.c
@@ -145,27 +145,22 @@ cosign_redirect( request_rec *r, cosign_host_config *cfg )
     if ( cfg->siteentry != NULL && strcasecmp( cfg->siteentry, "none" ) != 0 ) {
 	ref = cfg->siteentry;
     } else {
-	/* live dangerously, we're redirecting to http */
-	if ( cfg->http == 1 ) {
-	    if ((( port = ap_get_server_port( r )) == 80 ) ||
-		    ( cfg->noappendport == 1 )) {
-		ref = ap_psprintf( r->pool, "http://%s%s", 
-			ap_get_server_name( r ), r->unparsed_uri );
-	    } else {
-		ref = ap_psprintf( r->pool, "http://%s:%d%s", 
-			ap_get_server_name( r ), port, r->unparsed_uri );
-	    }
-	/* live securely, redirecting to https */
-	} else {
-	    if ((( port = ap_get_server_port( r )) == 443 ) ||
-		    ( cfg->noappendport == 1 )) {
-		ref = ap_psprintf( r->pool, "https://%s%s", 
-			ap_get_server_name( r ), r->unparsed_uri );
-	    } else {
-		ref = ap_psprintf( r->pool, "https://%s:%d%s", 
-			ap_get_server_name( r ), port, r->unparsed_uri );
-	    }
-	}
+        /* always redirect to http/https if standard port. (OSSXP.COM) */
+        if (( port = ap_get_server_port( r )) == 80 ) {
+            ref = ap_psprintf( r->pool, "http://%s%s",
+                ap_get_server_name( r ), r->unparsed_uri );
+        } else if (( port = ap_get_server_port( r )) == 443 ) {
+            ref = ap_psprintf( r->pool, "https://%s%s",
+                ap_get_server_name( r ), r->unparsed_uri );
+        } else if ( cfg->http == 1 ) {
+            /* live dangerously, we're redirecting to http */
+            ref = ap_psprintf( r->pool, "http://%s:%d%s",
+                ap_get_server_name( r ), port, r->unparsed_uri );
+        } else {
+            /* live securely, redirecting to https */
+            ref = ap_psprintf( r->pool, "https://%s:%d%s",
+                ap_get_server_name( r ), port, r->unparsed_uri );
+        }
     }
 
     if ( cfg->reqfc > 0 ) {
diff --git a/filters/apache2/mod_cosign.c b/filters/apache2/mod_cosign.c
index 2d4e95d..e0650ef 100755
--- a/filters/apache2/mod_cosign.c
+++ b/filters/apache2/mod_cosign.c
@@ -152,27 +152,22 @@ cosign_redirect( request_rec *r, cosign_host_config *cfg )
     if ( cfg->siteentry != NULL && strcasecmp( cfg->siteentry, "none" ) != 0 ) {
 	ref = cfg->siteentry;
     } else {
-	/* live dangerously, we're redirecting to http */
-	if ( cfg->http == 1 ) {
-	    if ((( port = ap_get_server_port( r )) == 80 ) ||
-		    ( cfg->noappendport == 1 )) {
-		ref = apr_psprintf( r->pool, "http://%s%s",
-			ap_get_server_name( r ), r->unparsed_uri );
-	    } else {
-		ref = apr_psprintf( r->pool, "http://%s:%d%s",
-			ap_get_server_name( r ), port, r->unparsed_uri );
-	    }
-	/* live securely, redirecting to https */
-	} else {
-	    if ((( port = ap_get_server_port( r )) == 443 ) ||
-		    ( cfg->noappendport == 1 )) {
-		ref = apr_psprintf( r->pool, "https://%s%s",
-			ap_get_server_name( r ), r->unparsed_uri );
-	    } else {
-		ref = apr_psprintf( r->pool, "https://%s:%d%s",
-			ap_get_server_name( r ), port, r->unparsed_uri );
-	    }
-	}
+        /* always redirect to http/https if standard port. (OSSXP.COM) */
+        if (( port = ap_get_server_port( r )) == 80 ) {
+            ref = apr_psprintf( r->pool, "http://%s%s",
+                ap_get_server_name( r ), r->unparsed_uri );
+        } else if (( port = ap_get_server_port( r )) == 443 ) {
+            ref = apr_psprintf( r->pool, "https://%s%s",
+                ap_get_server_name( r ), r->unparsed_uri );
+        } else if ( cfg->http == 1 ) {
+            /* live dangerously, we're redirecting to http */
+            ref = apr_psprintf( r->pool, "http://%s:%d%s",
+                ap_get_server_name( r ), port, r->unparsed_uri );
+        } else {
+            /* live securely, redirecting to https */
+            ref = apr_psprintf( r->pool, "https://%s:%d%s",
+                ap_get_server_name( r ), port, r->unparsed_uri );
+        }
     }
 
     if ( cfg->reqfc > 0 ) {
@@ -314,12 +309,12 @@ cosign_handler( request_rec *r )
 		( port != uri.port && cfg->noappendport != 1 )) {
 	if ( cfg->validredir == 1 ) {
 	    /* always redirect to https unless CosignHttpOnly is enabled. */
-	    if ( cfg->http == 1 ) {
+	    if ( cfg->http == 1 && uri.port == 80 ) {
 		scheme = "http";
 	    } else {
 		scheme = "https";
 	    }
-	    if ( port != uri.port ) {
+	    if ( port != uri.port && uri.port != 80 && uri.port != 443 ) {
 		dest = apr_psprintf( r->pool, "%s://%s:%d%s",
 			    scheme, uri.hostname, uri.port, r->unparsed_uri );
 	    } else {
diff --git a/filters/lighttpd/mod_cosign.c b/filters/lighttpd/mod_cosign.c
index b955be5..377fdcc 100644
--- a/filters/lighttpd/mod_cosign.c
+++ b/filters/lighttpd/mod_cosign.c
@@ -762,7 +762,8 @@ cosign_redirect( server *srv, connection *con, plugin_data *p_d )
 					CONST_STR_LEN( "none" )) != 0 ) {
 	ref = buffer_init_buffer( p->conf.siteentry );
     } else {
-	if ( p->conf.http ) {
+	port = ntohs( ss->addr.ipv4.sin_port );
+	if ( port == 80 || p->conf.http ) {
 	    ref = buffer_init_string( "http://" );
 	} else {
 	    ref = buffer_init_string( "https://" );
@@ -792,7 +793,8 @@ cosign_redirect( server *srv, connection *con, plugin_data *p_d )
 
 	    buffer_append_string_buffer( ref, con->server_name );
 
-	    port = ntohs( ss->addr.ipv4.sin_port );
+	    /* Set by previous code by ossxp.com */
+            /* port = ntohs( ss->addr.ipv4.sin_port ); */
 	    if ( port != ( p->conf.http ? 80 : 443 )
 		    && !p->conf.noappendport ) {
 		snprintf( pbuf, sizeof( pbuf ) - 1, ":%d", port );
-- 
tg: (118a78f..) t/bugfix_cosign_httponly_quirk (depends on: master)
