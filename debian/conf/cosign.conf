## [Shared settings for both cgi and cosignd]
##
## TLS parameters
## CA root certificates directory
set cosigncadir /opt/cosign/conf/certs/CA/

## CoSignd certificates location can overwrite by command line parameters
## which are defined in config file: /etc/default/cosignd.
## So the following settings only work for CGI certificates settings:
set cosigncert  /opt/ossxp/ssl/certs/cosign-cgi/insecure-cgi-1.crt
set cosignkey   /opt/ossxp/ssl/certs/cosign-cgi/insecure-cgi-1.key

## For cgi, cosignhost specifies the host where cosignd server(s) runs,
## multiple servers can be provided for load balence.
##
## For cosignd, cosignhost specifies the replication hosts. Replication
## may ignore itself, so the setting works even for cgi and cosignd in
## the same server.
##
## Warning: hostname must match with cosignd server's certificate CN
## This is overridden by the -h command line option and the default is off and "NULL"
##
#set cosignhost cosign-daemon cosign-daemon-1 cosign-daemon-2
set cosignhost cosign-daemon

## Default port is 6663
#set cosignport 6663


## [Settings for cosignd only]
##
## Default using built-in cosigndb path
# set cosigndb /opt/cosign/db/daemon

## If set cosigndbhashlen to 1, must create 64 subdirectories under 
## /opt/cosign/db/daemon: a-z, A-Z, 0-9, +, and -
set cosigndbhashlen 0

## Default timeout is 60*4 seconds
#set cosignnettimeout 240

## Enable or disable strict limitations on cookie access. If enabled,
## cosignd will only allow a client to check cookies associated with 
## the client's certificate Common Name. If disabled, cosignd does not
## enforce any  limitations on cookie checks.
## The default value is "on", enabling strict checking.
set cosignstrictcheck on


## [Settings for cgi only]
##
## templates directory.
set cosigntmpldir /opt/cosign/lib/templates-local

## When logout successfully, redirect to this url.
set cosignlogouturl https://weblogin.foo.bar/cgi-bin/login

## When cgi failed with loop problem, redirect to this url.
set cosignloopurl   https://weblogin.foo.bar/cgi-bin/info/looping

## If define, redirect to this url after sucessfully logged in.
#set cosignserviceurl  /services

## If logout redirect URL is http:// based, check against cosignlogoutregex
## . will match any logout redirect url.
set cosignlogoutregex .


## [for cosignd]
##
## cgi: allow connect with cosignd as cgi (register new sessions)
## Note:
##   * CN of the certificates from cgi server must match match with parameter
##     defines here.
##   * cgi only has one parameter, while service may have four to five.
#    * The parameter can be a regular expression.
cgi insecure-cgi-1
cgi insecure-cgi-2

## service: allow connect with cosignd as filter (check whether certain session
##          is valid.)
## Cosign 3.0 only allows clients access to service cookies which are associated
## with the certificate presented by the client.
## Note:
##   * Service takes 4 or 5 arguments
##   * Cosignd examines all of the fields; cosign.cgi looks only at the first three.
##   * The 1st argument is a regular expression (regex) of the service name 
##     associated with this particular web service,  for  example, "cosign-(web\.mail)".
##   * The 2nd argument is the validation URL associated with the service, which
##     which cosign.cgi will redirect to after a successful authentication.
##     The regex and the validation URL are connected.
##   * The 3rd field contains flags (T, 2, 0) denoting whether the client is permitted
##     to retrieve Kerberos tickets (T); whether the client is permitted to use the 
##     deprecated cosign v2 scheme (2); or whether the client will use defaults (0).
##     Flags can be combined.
##   * The 4th field is a regular expression of the client's CN.
##     Only client CNs matching the regex in the fourth argument are allowed
##     to talk to cosignd about service cookies matching the regex in the first argument.
##   * The 5th field is optional, used to confine cookie name: which cert CN can use what
##     service name. Eg:
##         service cosign-(.*) https://$1/cosign/valid 0 (.*\.xyz\.org) cosign-$1
##
#service cosign-(.*) http://$1.local/cosign/valid 0 insecure-filter-1
#service cosign-groupware http://groupware.local/cosign/valid 0 filter-1
service cosign-services?            https://weblogin.foo.bar/cosign/valid 0 insecure-filter-1
service cosign-(members?|gosa)      https://members.foo.bar/cosign/valid 0 insecure-filter-1
service cosign-(moin|moinmoin|wiki) http://www.foo.bar/cosign/valid 0 insecure-filter-1
service cosign-(wordpress|blog)     http://blog.foo.bar/cosign/valid 0 insecure-filter-1
service cosign-(svn|subversion|websvn|statsvn)   http://svn.foo.bar/cosign/valid 0 insecure-filter-1
service cosign-(mailman|list)       http://list.foo.bar/cosign/valid 0 insecure-filter-1
service cosign-(redmine|bugs?)      http://redmine.foo.bar/cosign/valid 0 insecure-filter-1
service cosign-testlink             http://testlink.foo.bar/cosign/valid 0 insecure-filter-1
service cosign-trac                 http://trac.foo.bar/cosign/valid 0 insecure-filter-1
service cosign-git                  http://git.foo.bar/cosign/valid 0 insecure-filter-1
service cosign-(hg|mercurial)       http://hg.foo.bar/cosign/valid 0 insecure-filter-1

## For CoSign Test WebSite
service cosign-site1.test1          http://site1.foo.bar/cosign/valid 0 insecure-filter-1
service cosign-site1.testservice    http://site1.foo.bar/cosign/valid 0 insecure-filter-1
service cosign-site2.test2          http://site2.foo.bar/cosign/valid 0 insecure-filter-2
service cosign-site2.testservice    http://site2.foo.bar/cosign/valid 0 insecure-filter-2


## [for cgi]
##
## Grab this user's factor:
## - argument 3 and later are name(s) of <FORM>/POST fields from the template
## - at least one factor is required for authentication to succeed
## - a factor executable only returns 1 factor name
## - factor names can be used by mod_cosign (CosignRequireFactor)
## - "-2" means this secondary script is started only if another one was successful
## - "-3" means this secondary script is started only if another one was successful, and
##        won't run script with flag -3, if there is not any required factors, and
##        won't failed if all required factors are satisfied.
##        This factor can use the same form filed as the first level factors.
##        "-3" is a ossxp extension.
#factor /opt/cosign/factor/test login password
factor /opt/cosign/factor/ldap2 login password
factor /opt/cosign/factor/invite login invite
factor /opt/cosign/factor/admin -3 login required
