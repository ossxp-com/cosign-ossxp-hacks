From: Jiang <jiangxin@ossxp.com>
Subject: [PATCH] t/message_localize

Translate CoSign error message using javascript.

Signed-off-by: Jiang <jiangxin@ossxp.com>

---
 cgi/Makefile.in           |   12 ++-
 cgi/cgi.c                 |  257 +++++++++++++++++++++++----------------------
 cgi/lang.c                |   65 +++++++++++-
 cgi/lang.h                |    1 +
 cgi/login.c               |   87 +++++++--------
 cgi/logout.c              |   37 ++++---
 cgi/subfile.c             |   37 +++++++
 html/js/js_locale.js      |   48 +++++++++
 locale/xgettext_format.rb |  133 +++++++++++++++++++++++
 9 files changed, 493 insertions(+), 184 deletions(-)

diff --git a/cgi/Makefile.in b/cgi/Makefile.in
index ca27f0a..547129a 100755
--- a/cgi/Makefile.in
+++ b/cgi/Makefile.in
@@ -1,6 +1,7 @@
 prefix=@prefix@
 exec_prefix=@exec_prefix@
 SBINDIR=@sbindir@
+LOCALEDIR=@localedir@
 CGIDIR  = @prefix@/cgi-ssl
 HTMLDIR  = @prefix@/html
 COSIGNCADIR=@cosigncadir@
@@ -36,8 +37,17 @@ TARGETS = logout cosign.cgi
 
 all: ${TARGETS}
 
+lang.o:	lang.c
+	${CC} ${CFLAGS} \
+	-D_LOCALEDIR=\"${LOCALEDIR}\" \
+	-D_TEMPLATE_LOCALEDIR=\"${COSIGNTMPLDIR}-local/locale\" \
+	-c $^
+
 lang: lang.c
-	gcc -g3 -D_DEBUG -o $@ $^
+	gcc -g3 -D_DEBUG \
+		-D_LOCALEDIR=\"${LOCALEDIR}\" \
+		-D_TEMPLATE_LOCALEDIR=\"${COSIGNTMPLDIR}-local/locale\" \
+		-o $@ $^
 
 subfile: subfile.c lang.o
 	gcc ${DEFS} ${OPTOPTS} -Wall ${INCPATH} \
diff --git a/cgi/cgi.c b/cgi/cgi.c
index b63cc5c..106f52b 100755
--- a/cgi/cgi.c
+++ b/cgi/cgi.c
@@ -27,6 +27,7 @@
 #include "subfile.h"
 #include "factor.h"
 #include "mkcookie.h"
+#include "lang.h"
 
 #define SERVICE_MENU	"/services/"
 #define LOOPWINDOW      30 
@@ -102,8 +103,8 @@ loop_checker( int time, int count, char *cookie )
     char       		new_cookie[ 255 ];
 
     if ( gettimeofday( &tv, NULL ) != 0 ) {
-	sl[ SL_TITLE ].sl_data = "Error: Loop Breaker";
-	sl[ SL_ERROR ].sl_data = "Please try again later.";
+	sl[ SL_TITLE ].sl_data = _("Error: Loop Breaker");
+	sl[ SL_ERROR ].sl_data = _("Please try again later.");
 	subfile( ERROR_HTML, sl, SUBF_OPT_ERROR, 500 );
 	exit( 0 );
     }
@@ -114,8 +115,8 @@ loop_checker( int time, int count, char *cookie )
 	count = 1;
 	if ( snprintf( new_cookie, sizeof( new_cookie ),
 		"%s/%d/%d", cookie, time, count) >= sizeof( new_cookie )) {
-	    sl[ SL_TITLE ].sl_data = "Error: Loop Breaker";
-	    sl[ SL_ERROR ].sl_data = "Please try again later.";
+	    sl[ SL_TITLE ].sl_data = _("Error: Loop Breaker");
+	    sl[ SL_ERROR ].sl_data = _("Please try again later.");
 	    subfile( ERROR_HTML, sl, SUBF_OPT_ERROR, 500 );
 	    exit( 0 );
 	}
@@ -130,8 +131,8 @@ loop_checker( int time, int count, char *cookie )
 	count = 1;
 	if ( snprintf( new_cookie, sizeof( new_cookie ),
 		"%s/%d/%d", cookie, time, count) >= sizeof( new_cookie )) {
-	    sl[ SL_TITLE ].sl_data = "Error: Loop Breaker";
-	    sl[ SL_ERROR ].sl_data = "Please try again later.";
+	    sl[ SL_TITLE ].sl_data = _("Error: Loop Breaker");
+	    sl[ SL_ERROR ].sl_data = _("Please try again later.");
 	    subfile( ERROR_HTML, sl, SUBF_OPT_ERROR, 500 );
 	    exit( 0 );
 	}
@@ -143,8 +144,8 @@ loop_checker( int time, int count, char *cookie )
     count++;
     if ( snprintf( new_cookie, sizeof( new_cookie ),
 	    "%s/%d/%d", cookie, time, count) >= sizeof( new_cookie )) {
-	sl[ SL_TITLE ].sl_data = "Error: Loop Breaker";
-	sl[ SL_ERROR ].sl_data = "Please try again later.";
+	sl[ SL_TITLE ].sl_data = _("Error: Loop Breaker");
+	sl[ SL_ERROR ].sl_data = _("Please try again later.");
 	subfile( ERROR_HTML, sl, SUBF_OPT_ERROR, 500 );
 	exit( 0 );
     }
@@ -295,6 +296,8 @@ main( int argc, char *argv[] )
     int				nmatch = 2;
     CGIHANDLE			*cgi;
 
+    init_locale();
+
     if ( argc == 2 ) {
 	if ( strcmp( argv[ 1 ], "-V" ) == 0 ) {
 	    printf( "%s\n", cosign_version );
@@ -322,32 +325,32 @@ main( int argc, char *argv[] )
     }
 
     if (( script = getenv( "SCRIPT_NAME" )) == NULL ) {
-	sl[ SL_TITLE ].sl_data = "Error: Server Configuration";
-	sl[ SL_ERROR ].sl_data = "Unable to retrieve the script name";
+	sl[ SL_TITLE ].sl_data = _("Error: Server Configuration");
+	sl[ SL_ERROR ].sl_data = _("Unable to retrieve the script name");
 	subfile( ERROR_HTML, sl, SUBF_OPT_ERROR, 500 );
 	exit( 0 );
     }
     if (( method = getenv( "REQUEST_METHOD" )) == NULL ) {
-	sl[ SL_TITLE ].sl_data = "Error: Server Configuration";
-	sl[ SL_ERROR ].sl_data = "Unable to retrieve method";
+	sl[ SL_TITLE ].sl_data = _("Error: Server Configuration");
+	sl[ SL_ERROR ].sl_data = _("Unable to retrieve method");
 	subfile( ERROR_HTML, sl, SUBF_OPT_ERROR, 500 );
 	exit(0);
     }
     if (( ip_addr = getenv( "REMOTE_ADDR" )) == NULL ) {
-	sl[ SL_TITLE ].sl_data = "Error: Server Configuration";
-	sl[ SL_ERROR ].sl_data = "Unable to retrieve IP address";
+	sl[ SL_TITLE ].sl_data = _("Error: Server Configuration");
+	sl[ SL_ERROR ].sl_data = _("Unable to retrieve IP address");
 	subfile( ERROR_HTML, sl, SUBF_OPT_ERROR, 500 );
 	exit(0);
     }
     if (( server_name = getenv( "SERVER_NAME" )) == NULL ) {
-	sl[ SL_TITLE ].sl_data = "Error: Server Configuration";
-	sl[ SL_ERROR ].sl_data = "Unable to retrieve server name";
+	sl[ SL_TITLE ].sl_data = _("Error: Server Configuration");
+	sl[ SL_ERROR ].sl_data = _("Unable to retrieve server name");
 	subfile( ERROR_HTML, sl, SUBF_OPT_ERROR, 500 );
 	exit(0);
     }
     if (( sport = getenv( "SERVER_PORT" )) == NULL ) {
-	sl[ SL_TITLE ].sl_data = "Error: Server Configuration";
-	sl[ SL_ERROR ].sl_data = "Unable to retrieve server port";
+	sl[ SL_TITLE ].sl_data = _("Error: Server Configuration");
+	sl[ SL_ERROR ].sl_data = _("Unable to retrieve server port");
 	subfile( ERROR_HTML, sl, SUBF_OPT_ERROR, 500 );
 	exit(0);
     }
@@ -358,9 +361,9 @@ main( int argc, char *argv[] )
 
     if ( subject_dn && issuer_dn ) {
 	if ( x509_translate( subject_dn, issuer_dn, &login, &realm ) != 0 ) {
-	    sl[ SL_TITLE ].sl_data = "Error: X509 failed";
-	    sl[ SL_ERROR ].sl_data = "There was an x.509 mutual authentication"
-		    " configuration error. Contact your administrator.";
+	    sl[ SL_TITLE ].sl_data = _("Error: X509 failed");
+	    sl[ SL_ERROR ].sl_data = _("There was an x.509 mutual authentication"
+		    " configuration error. Contact your administrator.");
 	    subfile( ERROR_HTML, sl, SUBF_OPT_ERROR, 500 );
 	    exit( 0 );
 	}
@@ -372,9 +375,9 @@ main( int argc, char *argv[] )
 	if ( remote_user && auth_type &&
 		strcasecmp( auth_type, "Negotiate" ) == 0 ) {
 	    if ( negotiate_translate( remote_user, &login, &realm ) != 0 ) {
-		sl[ SL_TITLE ].sl_data = "Error: Negotiate login failed";
-	 	sl[ SL_ERROR ].sl_data = "There was a problem processing your"
-			" authentication data. Contact your administrator";
+		sl[ SL_TITLE ].sl_data = _("Error: Negotiate login failed");
+	 	sl[ SL_ERROR ].sl_data = _("There was a problem processing your"
+			" authentication data. Contact your administrator");
 		subfile( ERROR_HTML, sl, SUBF_OPT_ERROR, 500 );
 		exit ( 0 );
 	    }
@@ -387,7 +390,7 @@ main( int argc, char *argv[] )
     if ( krbtkts ) {
 	if (( krbtkt_path = getenv( "KRB5CCNAME" )) == NULL ) {
 	    fprintf( stderr, "Kerberos ticket transfer is on, "
-		     " but no tickets were found in the environment\n" );
+			" but no tickets were found in the environment\n" );
 	} else if ( strncmp( krbtkt_path, "FILE:", 5 ) == 0 ) {
 	    krbtkt_path += 5;
 	}
@@ -395,9 +398,9 @@ main( int argc, char *argv[] )
 
     if ((( qs = getenv( "QUERY_STRING" )) != NULL ) && ( *qs != '\0' )) {
 	if (( p = strtok( qs, "&" )) == NULL ) {
-	    sl[ SL_TITLE ].sl_data = "Error: Unrecognized Service";
-	    sl[ SL_ERROR ].sl_data = "Unable to determine referring "
-		    "service from query string.";
+	    sl[ SL_TITLE ].sl_data = _("Error: Unrecognized Service");
+	    sl[ SL_ERROR ].sl_data = _("Unable to determine referring "
+		    "service from query string.");
 	    subfile( ERROR_HTML, sl, SUBF_OPT_ERROR, 400 );
 	    exit( 0 );
 	}
@@ -409,9 +412,9 @@ main( int argc, char *argv[] )
 
 	if ( p != NULL && strncmp( p, "factors=", 8 ) == 0 ) {
 	    if (( factor = strchr( p, '=' )) == NULL ) {
-		sl[ SL_TITLE ].sl_data = "Error: malformatted factors";
-		sl[ SL_ERROR ].sl_data = "Unable to determine required "
-			"factors from query string.";
+		sl[ SL_TITLE ].sl_data = _("Error: malformatted factors");
+		sl[ SL_ERROR ].sl_data = _("Unable to determine required "
+			"factors from query string.");
 		subfile( ERROR_HTML, sl, SUBF_OPT_ERROR, 400 );
 		exit( 0 );
 	    }
@@ -427,17 +430,17 @@ main( int argc, char *argv[] )
 		service[ len - 1 ] = '\0';
 	    }
 	    if ( strncmp( service, "cosign-", 7 ) != 0 ) {
-		sl[ SL_TITLE ].sl_data = "Error: Unrecognized Service";
-		sl[ SL_ERROR ].sl_data = "Bad service in query string.";
+		sl[ SL_TITLE ].sl_data = _("Error: Unrecognized Service");
+		sl[ SL_ERROR ].sl_data = _("Bad service in query string.");
 		subfile( ERROR_HTML, sl, SUBF_OPT_ERROR, 400 );
 		exit( 0 );
 	    }
 	    sl[ SL_SERVICE ].sl_data = service;
 
 	    if (( ref = strtok( NULL, "" )) == NULL ) {
-		sl[ SL_TITLE ].sl_data = "Error: malformatted referrer";
-		sl[ SL_ERROR ].sl_data = "Unable to determine referring "
-			"service from query string.";
+		sl[ SL_TITLE ].sl_data = _("Error: malformatted referrer");
+		sl[ SL_ERROR ].sl_data = _("Unable to determine referring "
+			"service from query string.");
 		subfile( ERROR_HTML, sl, SUBF_OPT_ERROR, 400 );
 		exit( 0 );
 	    }
@@ -457,9 +460,9 @@ main( int argc, char *argv[] )
 
     if ( cookie == NULL ) {
 	if (( strcmp( method, "POST" ) == 0 ) || rebasic ) {
-	    sl[ SL_TITLE ].sl_data = "Error: Cookies Required";
-	    sl[ SL_ERROR ].sl_data = "This service requires that "
-		    "cookies be enabled.";
+	    sl[ SL_TITLE ].sl_data = _("Error: Cookies Required");
+	    sl[ SL_ERROR ].sl_data = _("This service requires that "
+		    "cookies be enabled.");
 	    subfile( ERROR_HTML, sl, SUBF_OPT_ERROR, 400 );
 	    exit( 0 );
 	}
@@ -476,8 +479,8 @@ main( int argc, char *argv[] )
 	cookietime = atoi( misc );
 
 	if ( gettimeofday( &tv, NULL ) != 0 ) {
-	    sl[ SL_TITLE ].sl_data = "Error: Login Screen";
-	    sl[ SL_ERROR ].sl_data = "Please try again later.";
+	    sl[ SL_TITLE ].sl_data = _("Error: Login Screen");
+	    sl[ SL_ERROR ].sl_data = _("Please try again later.");
 	    subfile( ERROR_HTML, sl, SUBF_OPT_ERROR, 500 );
 	    exit( 0 );
 	}
@@ -495,9 +498,9 @@ main( int argc, char *argv[] )
 
     /* setup conn and ssl and hostlist */
     if (( head = connlist_setup( cosign_host, cosign_port )) == NULL ) {
-	sl[ SL_TITLE ].sl_data = "Error: Server Configuration";
-	sl[ SL_ERROR ].sl_data = "We were unable to contact the "
-		"authentication server.  Please try again later.";
+	sl[ SL_TITLE ].sl_data = _("Error: Server Configuration");
+	sl[ SL_ERROR ].sl_data = _("We were unable to contact the "
+		"authentication server.  Please try again later.");
 	subfile( ERROR_HTML, sl, SUBF_OPT_ERROR, 500 );
 	exit( 0 );
     }
@@ -506,9 +509,9 @@ main( int argc, char *argv[] )
     SSL_library_init();
 
     if ( cosign_ssl( cryptofile, certfile, cadir, &ctx ) != 0 ) {
-	sl[ SL_TITLE ].sl_data = "Error: Server Configuration";
-	sl[ SL_ERROR ].sl_data = "Failed to initialise connections "
-		"to the authentication server. Please try again later";
+	sl[ SL_TITLE ].sl_data = _("Error: Server Configuration");
+	sl[ SL_ERROR ].sl_data = _("Failed to initialise connections "
+		"to the authentication server. Please try again later");
 	subfile( ERROR_HTML, sl, SUBF_OPT_ERROR, 500 );
 	exit( 0 );
     }
@@ -519,9 +522,9 @@ main( int argc, char *argv[] )
 	if ( rebasic && cosign_login( head, cookie, ip_addr, remote_user,
 		    realm, krbtkt_path ) < 0 ) {
 	    fprintf( stderr, "cosign_login: basic login failed\n" ) ;
-	    sl[ SL_TITLE ].sl_data = "Error: Please try later";
-	    sl[ SL_ERROR ].sl_data = "We were unable to contact the "
-		    "authentication server. Please try again later.";
+	    sl[ SL_TITLE ].sl_data = _("Error: Please try later");
+	    sl[ SL_ERROR ].sl_data = _("We were unable to contact the "
+		    "authentication server. Please try again later.");
 	    subfile( ERROR_HTML, sl, SUBF_OPT_ERROR, 500 );
 	    exit( 0 );
 	}
@@ -537,9 +540,9 @@ main( int argc, char *argv[] )
 	}
 	if ( scookie == NULL ) {
 	    fprintf( stderr, "no matching service for %s\n", service );
-	    sl[ SL_TITLE ].sl_data = "Error: Unknown service";
-	    sl[ SL_ERROR ].sl_data = "We were unable to locate a "
-		    "service matching the one provided.";
+	    sl[ SL_TITLE ].sl_data = _("Error: Unknown service");
+	    sl[ SL_ERROR ].sl_data = _("We were unable to locate a "
+		    "service matching the one provided.");
 		subfile( ERROR_HTML, sl, SUBF_OPT_SETSTATUS, 500 );
 		exit( 0 );
 	    }
@@ -548,18 +551,18 @@ main( int argc, char *argv[] )
 		matchbuf, nmatch, matches, service ) != 0 ) {
 	    fprintf( stderr, "regex substitution failed: %s into %s\n",
 		service, scookie->sl_wkurl );
-	    sl[ SL_TITLE ].sl_data = "Error: Unknown service";
-	    sl[ SL_ERROR ].sl_data = "We were unable to locate a "
-		    "service matching the one provided.";
+	    sl[ SL_TITLE ].sl_data = _("Error: Unknown service");
+	    sl[ SL_ERROR ].sl_data = _("We were unable to locate a "
+		    "service matching the one provided.");
 	    subfile( ERROR_HTML, sl, SUBF_OPT_SETSTATUS, 500 );
 	    exit( 0 );
 	}
 
 	if ( scheme == 2 && !( scookie->sl_flag & SL_SCHEME_V2 )) {
 	    fprintf( stderr, "requested v2 for v3 service %s\n", service );
-	    sl[ SL_TITLE ].sl_data = "Error: Unknown service";
-	    sl[ SL_ERROR ].sl_data = "We were unable to locate a "
-		    "service matching the one provided.";
+	    sl[ SL_TITLE ].sl_data = _("Error: Unknown service");
+	    sl[ SL_ERROR ].sl_data = _("We were unable to locate a "
+		    "service matching the one provided.");
 	    subfile( ERROR_HTML, sl, SUBF_OPT_SETSTATUS, 500 );
 	    exit( 0 );
 	}
@@ -595,8 +598,8 @@ main( int argc, char *argv[] )
 		}
 	    }
 	    if ( r != NULL ) {
-		sl[ SL_ERROR ].sl_data = "Additional authentication"
-			" is required.";
+		sl[ SL_ERROR ].sl_data = _("Additional authentication"
+			" is required.");
 		goto loginscreen;
 	    }
 	}
@@ -606,9 +609,9 @@ main( int argc, char *argv[] )
 	    if ( mkscookie( service, new_scookie,
 			    sizeof( new_scookie )) != 0 ) {
 		fprintf( stderr, "%s: mkscookie failed\n", script );
-		sl[ SL_TITLE ].sl_data = "Error: Make Service Cookie Failed";
-		sl[ SL_ERROR ].sl_data = "We were unable to create a service "
-		    "cookie. Please try again later.";
+		sl[ SL_TITLE ].sl_data = _("Error: Make Service Cookie Failed");
+		sl[ SL_ERROR ].sl_data = _("We were unable to create a service "
+		    "cookie. Please try again later.");
 		subfile( ERROR_HTML, sl, SUBF_OPT_ERROR, 500 );
 		exit( 0 );
 	    }
@@ -617,10 +620,11 @@ main( int argc, char *argv[] )
 
 	if (( rc = cosign_register( head, cookie, ip_addr, service )) < 0 ) {
 	    fprintf( stderr, "%s: cosign_register failed\n", script );
-	    sl[ SL_TITLE ].sl_data = "Error: Register Failed";
-	    sl[ SL_ERROR ].sl_data = "We were unable to contact "
-		    "the authentication server.  Please try again later.";
+	    sl[ SL_TITLE ].sl_data = _("Error: Register Failed");
+	    sl[ SL_ERROR ].sl_data = _("We were unable to contact "
+		    "the authentication server.  Please try again later.");
 	    subfile( ERROR_HTML, sl, SUBF_OPT_SETSTATUS, 500 );
+	    exit( 0 );
 	}
 
 	loop_checker( cookietime, cookiecount, cookie );
@@ -638,9 +642,9 @@ main( int argc, char *argv[] )
 	    if ( rebasic && cosign_login( head, cookie, ip_addr, remote_user,
 			realm, krbtkt_path ) < 0 ) {
 		fprintf( stderr, "cosign_login: basic login failed\n" ) ;
-		sl[ SL_TITLE ].sl_data = "Error: Please try later";
-		sl[ SL_ERROR ].sl_data = "We were unable to contact the "
-			"authentication server. Please try again later.";
+		sl[ SL_TITLE ].sl_data = _("Error: Please try later");
+		sl[ SL_ERROR ].sl_data = _("We were unable to contact the "
+			"authentication server. Please try again later.");
 		subfile( ERROR_HTML, sl, SUBF_OPT_SETSTATUS, 500 );
 		exit( 0 );
 	    } else if ( !rebasic ) {
@@ -662,8 +666,8 @@ main( int argc, char *argv[] )
     tmpl = LOGIN_ERROR_HTML;
 
     if (( cgi = cgi_init()) == NULL ) {
-        sl[ SL_TITLE ].sl_data = "Error: Server Error";
-        sl[ SL_ERROR ].sl_data = "cgi_init failed";
+        sl[ SL_TITLE ].sl_data = _("Error: Server Error");
+        sl[ SL_ERROR ].sl_data = _("cgi_init failed");
         subfile( ERROR_HTML, sl, SUBF_OPT_ERROR, 500 );
         exit( 0 );
     }  
@@ -682,8 +686,8 @@ main( int argc, char *argv[] )
 		}
 	    }
 	    if ( cl[ i ].cl_key == NULL ) {
-		sl[ SL_TITLE ].sl_data = "Error: Server Configuration";
-		sl[ SL_ERROR ].sl_data = "Too many form fields configured.";
+		sl[ SL_TITLE ].sl_data = _("Error: Server Configuration");
+		sl[ SL_ERROR ].sl_data = _("Too many form fields configured.");
 		subfile( ERROR_HTML, sl, SUBF_OPT_ERROR, 500 );
 		exit( 0 );
 	    }
@@ -718,8 +722,8 @@ main( int argc, char *argv[] )
 	login = cl[ CL_LOGIN ].cl_data = ui.ui_login;
     } else {
 	if ( cl[ CL_LOGIN ].cl_data == NULL ) {
-	    sl[ SL_TITLE ].sl_data = "Authentication Required";
-	    sl[ SL_ERROR ].sl_data = "Please enter your login and password.";
+	    sl[ SL_TITLE ].sl_data = _("Authentication Required");
+	    sl[ SL_ERROR ].sl_data = _("Please enter your login and password.");
 	    goto loginscreen;
 	}
 	login = sl[ SL_LOGIN ].sl_data = cl[ CL_LOGIN ].cl_data;
@@ -772,18 +776,18 @@ main( int argc, char *argv[] )
         }
 
 	if ( rc == COSIGN_CGI_PASSWORD_EXPIRED ) {
-	    sl[ SL_TITLE ].sl_data = "Password Expired";
+	    sl[ SL_TITLE ].sl_data = _("Password Expired");
 	    sl[ SL_ERROR ].sl_data = msg;
-            subfile( EXPIRED_ERROR_HTML, sl, 0 );
-            exit( 0 ); 
-        }
+	    subfile( EXPIRED_ERROR_HTML, sl, 0 );
+	    exit( 0 ); 
+	}
 
-	sl[ SL_TITLE ].sl_data = "Authentication Required";
+	sl[ SL_TITLE ].sl_data = _("Authentication Required");
 	if ( msg != NULL && strlen( msg ) > 0 ) {
 	    sl[ SL_ERROR ].sl_data = msg;
 	} else {
-	    sl[ SL_ERROR ].sl_data = "Password or Account Name incorrect. "
-		    "Is [caps lock] on?";
+	    sl[ SL_ERROR ].sl_data = _("Password or Account Name incorrect. "
+		    "Is [caps lock] on?");
 	}
 	goto loginscreen;
 
@@ -812,23 +816,23 @@ loggedin:
 	}
 
 	if (( fl->fl_flag == 2 ) && ( *ui.ui_login == '\0' )) {
-	    sl[ SL_TITLE ].sl_data = "Authentication Required";
-	    sl[ SL_ERROR ].sl_data = "Primary authentication is required"
-		    " before secondary authentication.";
+	    sl[ SL_TITLE ].sl_data = _("Authentication Required");
+	    sl[ SL_ERROR ].sl_data = _("Primary authentication is required"
+		    " before secondary authentication.");
 	    goto loginscreen;
 	}
 	if (( rc = execfactor( fl, cl, &msg )) != COSIGN_CGI_OK ) {
-	    sl[ SL_ERROR ].sl_data = msg;
+	    sl[ SL_ERROR ].sl_data = _(msg);
 	    fprintf( stderr, "CoSign: user %s authentication failure from host [%s]. (factors)\n", login !=NULL ? login : "?", ip_addr);
 	    if ( msg != NULL && strlen( msg ) > 0 )
 		fprintf( stderr, "CoSign: auth failed. Error message: %s\n", msg);
-            if ( rc == COSIGN_CGI_PASSWORD_EXPIRED ) {
-	        sl[ SL_TITLE ].sl_data = "Password Expired";
-                subfile( EXPIRED_ERROR_HTML, sl, 0 );
-                exit( 0 );
-            } else {
-	        sl[ SL_TITLE ].sl_data = "Authentication Required";
-            }
+	    if ( rc == COSIGN_CGI_PASSWORD_EXPIRED ) {
+		sl[ SL_TITLE ].sl_data = _("Password Expired");
+		subfile( EXPIRED_ERROR_HTML, sl, 0 );
+		exit( 0 );
+	    } else {
+		sl[ SL_TITLE ].sl_data = _("Authentication Required");
+	    }
 	    goto loginscreen;
 	}
 
@@ -855,9 +859,9 @@ loggedin:
 	if (( ui.ui_factors[ i ] == NULL ) ||
 		( strcmp( ui.ui_ipaddr, ip_addr ) != 0 )) {
 	    if ( cosign_login( head, cookie, ip_addr, login, msg, NULL ) < 0 ) {
-		sl[ SL_TITLE ].sl_data = "Error: Please try later";
-		sl[ SL_ERROR ].sl_data = "We were unable to contact the "
-			"authentication server. Please try again later.";
+		sl[ SL_TITLE ].sl_data = _("Error: Please try later");
+		sl[ SL_ERROR ].sl_data = _("We were unable to contact the "
+			"authentication server. Please try again later.");
 		subfile( ERROR_HTML, sl, SUBF_OPT_ERROR, 500 );
 		exit( 0 );
 	    }
@@ -867,8 +871,8 @@ loggedin:
     }
 
     if ( *ui.ui_login == '\0' ) {
-	sl[ SL_TITLE ].sl_data = "Authentication Required";
-	sl[ SL_ERROR ].sl_data = "Please enter your login and password.";
+	sl[ SL_TITLE ].sl_data = _("Authentication Required");
+	sl[ SL_ERROR ].sl_data = _("Please enter your login and password.");
 	goto loginscreen;
     }
 
@@ -884,9 +888,9 @@ loggedin:
 	}
 	if ( scookie == NULL ) {
 	    fprintf( stderr, "no matching service for %s\n", service );
-	    sl[ SL_TITLE ].sl_data = "Error: Unknown service";
-	    sl[ SL_ERROR ].sl_data = "We were unable to locate a "
-		    "service matching the one provided.";
+	    sl[ SL_TITLE ].sl_data = _("Error: Unknown service");
+	    sl[ SL_ERROR ].sl_data = _("We were unable to locate a "
+		    "service matching the one provided.");
 		subfile( ERROR_HTML, sl, SUBF_OPT_SETSTATUS, 500 );
 		exit( 0 );
 	    }
@@ -895,18 +899,18 @@ loggedin:
 		matchbuf, nmatch, matches, service ) != 0 ) {
 	    fprintf( stderr, "regex substitution failed: %s into %s\n",
 		service, scookie->sl_wkurl );
-	    sl[ SL_TITLE ].sl_data = "Error: Unknown service";
-	    sl[ SL_ERROR ].sl_data = "We were unable to locate a "
-		    "service matching the one provided.";
+	    sl[ SL_TITLE ].sl_data = _("Error: Unknown service");
+	    sl[ SL_ERROR ].sl_data = _("We were unable to locate a "
+		    "service matching the one provided.");
 	    subfile( ERROR_HTML, sl, SUBF_OPT_SETSTATUS, 500 );
 	    exit( 0 );
 	}
 
 	if ( scheme == 2 && !( scookie->sl_flag & SL_SCHEME_V2 )) {
 	    fprintf( stderr, "requested v2 for v3 service %s\n", service );
-	    sl[ SL_TITLE ].sl_data = "Error: Unknown service";
-	    sl[ SL_ERROR ].sl_data = "We were unable to locate a "
-		    "service matching the one provided.";
+	    sl[ SL_TITLE ].sl_data = _("Error: Unknown service");
+	    sl[ SL_ERROR ].sl_data = _("We were unable to locate a "
+		    "service matching the one provided.");
 	    subfile( ERROR_HTML, sl, SUBF_OPT_SETSTATUS, 500 );
 	    exit( 0 );
 	}
@@ -924,8 +928,8 @@ loggedin:
 		    }
 		}
 		if ( new_factors[ j ] == NULL ) {
-		    sl[ SL_ERROR ].sl_data = "Please complete"
-			    " all required fields to re-authenticate.";
+		    sl[ SL_ERROR ].sl_data = _("Please complete"
+			    " all required fields to re-authenticate.");
 		    goto loginscreen;
 		}
 	    }
@@ -940,9 +944,9 @@ loggedin:
 	    if ( mkscookie( service, new_scookie,
 			    sizeof( new_scookie )) != 0 ) {
 		fprintf( stderr, "%s: mkscookie failed\n", script );
-		sl[ SL_TITLE ].sl_data = "Error: Make Service Cookie Failed";
-		sl[ SL_ERROR ].sl_data = "We were unable to create a service "
-		    "cookie. Please try again later.";
+		sl[ SL_TITLE ].sl_data = _("Error: Make Service Cookie Failed");
+		sl[ SL_ERROR ].sl_data = _("We were unable to create a service "
+		    "cookie. Please try again later.");
 		subfile( ERROR_HTML, sl, SUBF_OPT_SETSTATUS, 500 );
 		exit( 0 );
 	    }
@@ -951,9 +955,9 @@ loggedin:
 
         if (( rc = cosign_register( head, cookie, ip_addr, service )) < 0 ) {
             fprintf( stderr, "%s: implicit cosign_register failed\n", script );
-            sl[ SL_TITLE ].sl_data = "Error: Implicit Register Failed";
-            sl[ SL_ERROR ].sl_data = "We were unable to contact the "
-		    "authentication server.  Please try again later.";
+            sl[ SL_TITLE ].sl_data = _("Error: Implicit Register Failed");
+            sl[ SL_ERROR ].sl_data = _("We were unable to contact the "
+		    "authentication server.  Please try again later.");
 	    subfile( ERROR_HTML, sl, SUBF_OPT_SETSTATUS, 500 );
             exit( 0 );
         }
@@ -991,10 +995,12 @@ loginscreen:
 	if ( gettimeofday( &tv, NULL ) != 0 ) {
 	    fprintf( stderr, "%s: gettimeofday failed: %s\n",
 			script, strerror( errno ));
-	    sl[ SL_TITLE ].sl_data = "Error: Login Screen";
-	    sl[ SL_ERROR ].sl_data = "Please try again later.";
+	    sl[ SL_TITLE ].sl_data = _("Error: Login Screen");
+	    sl[ SL_ERROR ].sl_data = _("Please try again later.");
 	    subfile( ERROR_HTML, sl, SUBF_OPT_SETSTATUS, 500 );
 	    exit( 0 );
+	} else if ( sl[ SL_TITLE ].sl_data == NULL ) {
+	    sl[ SL_TITLE ].sl_data = _("Authentication Required");
 	}
 	snprintf( new_cookie, sizeof( new_cookie ), "cosign=%s/%lu",
 		new_cookiebuf, tv.tv_sec );
@@ -1033,23 +1039,26 @@ loginscreen:
 	if (( scookie != NULL ) && ( scookie->sl_flag & SL_REAUTH )) {
 	    sl[ SL_DFACTOR ].sl_data = NULL;
 	    sl[ SL_RFACTOR ].sl_data = smash( scookie->sl_factors );
-	    sl[ SL_TITLE ].sl_data = "Re-Authentication Required";
+	    sl[ SL_TITLE ].sl_data = _("Re-Authentication Required");
 	    if ( sl[ SL_ERROR ].sl_data == NULL ) {
-		sl[ SL_ERROR ].sl_data = "Please Re-Authenticate.";
+		sl[ SL_ERROR ].sl_data = _("Please Re-Authenticate.");
 	    }
 	    tmpl = REAUTH_HTML;
 	} else if ( strcmp( ui.ui_ipaddr, ip_addr ) != 0 ) {
 	    sl[ SL_DFACTOR ].sl_data = NULL;
 	    sl[ SL_RFACTOR ].sl_data = ui.ui_factors[ 0 ];
-	    sl[ SL_TITLE ].sl_data = "Re-Authentication Required";
+	    sl[ SL_TITLE ].sl_data = _("Re-Authentication Required");
 	    if ( sl[ SL_ERROR ].sl_data == NULL ) {
-		sl[ SL_ERROR ].sl_data = "Re-authenticate to confirm"
-			" your new Internet address.";
+		sl[ SL_ERROR ].sl_data = _("Re-authenticate to confirm"
+			" your new Internet address.");
 	    }
 	    tmpl = REAUTH_HTML;
 	} else {
 	    sl[ SL_DFACTOR ].sl_data = smash( ui.ui_factors );
 	    sl[ SL_RFACTOR ].sl_data = factor;
+	    if ( sl[ SL_TITLE ].sl_data == NULL ) {
+		sl[ SL_TITLE ].sl_data = _("Authentication Required");
+	    }
 	    tmpl = LOGIN_ERROR_HTML;
 	}
     }
@@ -1057,3 +1066,5 @@ loginscreen:
     subfile( tmpl, sl, SUBF_OPT_NOCACHE );
     exit( 0 );
 }
+
+// vim: noet ts=8 sw=4
diff --git a/cgi/lang.c b/cgi/lang.c
index 85f4d3e..9a81b39 100644
--- a/cgi/lang.c
+++ b/cgi/lang.c
@@ -123,6 +123,59 @@ get_accept_language()
     return accept_languages = lang;
 }
 
+    void
+init_locale()
+{
+#define MAX_LANG_CODE	20
+    char	**lang;
+    char	*p;
+    char	lang_utf8[MAX_LANG_CODE+7] = "";
+    int		found = 0;
+
+    bindtextdomain("cosign", _LOCALEDIR);
+    bindtextdomain("template",  _TEMPLATE_LOCALEDIR);
+    textdomain("cosign");
+    lang = get_accept_language();
+    while(*lang !=NULL)
+    {
+	p = strchr(*lang, '.');
+	lang_utf8[0] = '\0';
+	if (p!=NULL && p-*lang < MAX_LANG_CODE) {
+	    strncpy(lang_utf8, *lang, p-*lang);
+	    lang_utf8[p-*lang] = '\0';
+	    strcat(lang_utf8, ".UTF-8");
+	} else if (strlen(*lang) < MAX_LANG_CODE) {
+	    strcpy(lang_utf8, *lang);
+	    strcat(lang_utf8, ".UTF-8");
+	}
+
+	if (lang_utf8[0] != '\0' && setlocale( LC_ALL, lang_utf8) != NULL) {
+	    found = 1;
+	} else if (strcmp(*lang, "zh")==0) {
+	    if (setlocale( LC_ALL, "zh_CN.UTF-8") != NULL)
+		found = 1;
+	    else if (setlocale( LC_ALL, "zh_CN") != NULL)
+		found = 1;
+	    else if (setlocale( LC_ALL, *lang) != NULL)
+		found = 1;
+	} else if (setlocale( LC_ALL, *lang) != NULL) {
+	    found = 1;
+	} else if (strncmp(*lang, "en", 2)==0) {
+	    setlocale( LC_ALL, "C");
+	    found = 1;
+	}
+	if (found)
+	    break;
+	lang++;
+    }
+
+    if (!found)
+	setlocale( LC_ALL, "C");
+
+    return;
+}
+
+
 #ifdef _DEBUG
 #define getenv mygetenv
 
@@ -162,19 +215,21 @@ char *my_lang_buff[] = {
     "it,en_us,en,zh-sg,zh,zh-sg,zh-cn,zh,zh-tw,ar,it,zr1,zr2,zr3,zr4,zr5, zr6;q=1,zr7",
     "it,en_us,en,zh-sg,zh,zh-sg,zh-cn,zh,zh-tw,ar,it,zr1,zr2,zr3,zr4,zr5, zr6;q=1,zr7,zr8",
     "it,en_us,en,zh-sg,zh,zh-sg,zh-cn,zh,zh-tw,ar,it,zr1,zr2,zr3,zr4,zr5, zr6;q=1,zr7,zr8,zr9",
+    NULL /* Keep this line: end of loop */
     };
 
     char *mygetenv( char *ignore)
 {
     static int		loop = -1;
     int 		num = sizeof(my_lang_buff)/sizeof(*my_lang_buff);
-    return ++loop < num ? my_lang_buff[loop] : NULL;
+    return my_lang_buff[ ++loop % num ];
 }
 
     int
 main()
 {
     char	**lang, **orig;
+    int		i;
 
     while (lang = get_accept_language())
     {
@@ -190,6 +245,14 @@ main()
 	}
 	printf("\n");
     }
+    for (i=0; i< sizeof(my_lang_buff) / sizeof(*my_lang_buff); i++)
+    {
+	char *p;
+	init_locale();
+	p = setlocale( LC_ALL, NULL );
+	printf ("Environment : %s.\n", my_lang_buff[i]);
+	printf ("     locale : %s.\n", p == NULL? "" : p);
+    }	
 }
 
 #endif
diff --git a/cgi/lang.h b/cgi/lang.h
index 3b32a78..7726787 100644
--- a/cgi/lang.h
+++ b/cgi/lang.h
@@ -13,5 +13,6 @@
 #define N_(String) gettext_noop (String)
 
 char ** get_accept_language();
+void init_locale();
 
 #endif
diff --git a/cgi/login.c b/cgi/login.c
index 2f36465..05bc875 100644
--- a/cgi/login.c
+++ b/cgi/login.c
@@ -32,6 +32,7 @@
 #include "conf.h"
 #include "network.h"
 #include "subfile.h"
+#include "lang.h"
 #include "mkcookie.h"
 
 extern int	errno;
@@ -138,8 +139,8 @@ cosign_login_mysql( struct connlist *head, char *cosignname, char *id,
 
     if ( !mysql_real_connect( &friend_db, friend_db_name, friend_login, friend_passwd, "friend", 3306, NULL, 0 )) {
 	fprintf( stderr, mysql_error( &friend_db ));
-	sl[ SL_ERROR ].sl_data = "Unable to connect to guest account database.";
-	sl[ SL_TITLE ].sl_data = "Database Problem";
+	sl[ SL_ERROR ].sl_data = _("Unable to connect to guest account database.");
+	sl[ SL_TITLE ].sl_data = _("Database Problem");
 	subfile( tmpl, sl, 0 );
 	exit( 0 );
     }
@@ -159,8 +160,8 @@ cosign_login_mysql( struct connlist *head, char *cosignname, char *id,
 
 	default:
 	    fprintf( stderr, "invalid username: %s %s\n", id, ip_addr );
-	    sl[ SL_ERROR ].sl_data = "Provided login appears to be invalid";
-	    sl[ SL_TITLE ].sl_data = "Invalid Input";
+	    sl[ SL_ERROR ].sl_data = _("Provided login appears to be invalid");
+	    sl[ SL_TITLE ].sl_data = _("Invalid Input");
 	    subfile( tmpl, sl, 0 );
 	    exit( 0 );
 	}
@@ -169,16 +170,16 @@ cosign_login_mysql( struct connlist *head, char *cosignname, char *id,
 	    " FROM friend WHERE login = '%s' AND passwd is NOT NULL",
 	    id ) >= sizeof( sql )) {
 	fprintf( stderr, "invalid username: %s %s\n", id, ip_addr );
-	sl[ SL_ERROR ].sl_data = "Provided login appears to be invalid";
-	sl[ SL_TITLE ].sl_data = "Invalid Input";
+	sl[ SL_ERROR ].sl_data = _("Provided login appears to be invalid");
+	sl[ SL_TITLE ].sl_data = _("Invalid Input");
 	subfile( tmpl, sl, 0 );
 	exit( 0 );
     }
 
     if( mysql_real_query( &friend_db, sql, strlen( sql ))) {
 	fprintf( stderr, mysql_error( &friend_db ));
-	sl[ SL_ERROR ].sl_data = "Unable to query guest account database.";
-	sl[ SL_TITLE ].sl_data = "Server Problem";
+	sl[ SL_ERROR ].sl_data = _("Unable to query guest account database.");
+	sl[ SL_TITLE ].sl_data = _("Server Problem");
 	subfile( tmpl, sl, 0 );
 	exit( 0 );
     }
@@ -187,8 +188,8 @@ cosign_login_mysql( struct connlist *head, char *cosignname, char *id,
 	/* was there an error?  NULL can be okay. */
 	if ( mysql_errno( &friend_db )) {
 	    fprintf( stderr, mysql_error( &friend_db ));
-	    sl[ SL_ERROR ].sl_data = "Problems connecting to the database.";
-	    sl[ SL_TITLE ].sl_data = "Database Connection Problem";
+	    sl[ SL_ERROR ].sl_data = _("Problems connecting to the database.");
+	    sl[ SL_TITLE ].sl_data = _("Database Connection Problem");
 	    subfile( tmpl, sl, 0 );
 	    exit( 0 );
 	}
@@ -229,9 +230,9 @@ cosign_login_mysql( struct connlist *head, char *cosignname, char *id,
 
     if ( cosign_login( head, cookie, ip_addr, cosignname, realm, NULL ) < 0 ) {
 	fprintf( stderr, "cosign_login_mysql: login failed\n" ) ;
-	sl[ SL_ERROR ].sl_data = "We were unable to contact the "
-		"authentication server. Please try again later.";
-	sl[ SL_TITLE ].sl_data = "Error: Please try later";
+	sl[ SL_ERROR ].sl_data = _("We were unable to contact the "
+		"authentication server. Please try again later.");
+	sl[ SL_TITLE ].sl_data = _("Error: Please try later");
 	subfile( tmpl, sl, 0 );
 	exit( 0 );
     }
@@ -263,15 +264,15 @@ cosign_login_krb5( struct connlist *head, char *cosignname, char *id,
     lcgi_configure();
 
     if (( kerror = krb5_init_context( &kcontext ))) {
-	sl[ SL_ERROR ].sl_data = (char *)error_message( kerror );
-	sl[ SL_TITLE ].sl_data = "Authentication Required ( kerberos error )";
+	sl[ SL_ERROR ].sl_data = _( (char *)error_message( kerror ) );
+	sl[ SL_TITLE ].sl_data = _("Authentication Required ( kerberos error )");
 	subfile( tmpl, sl, 0 );
 	exit( 0 );
     }
 
     if (( kerror = krb5_parse_name( kcontext, id, &kprinc ))) {
-	sl[ SL_ERROR ].sl_data = (char *)error_message( kerror );
-	sl[ SL_TITLE ].sl_data = "Authentication Required ( kerberos error )";
+	sl[ SL_ERROR ].sl_data = _( (char *)error_message( kerror ) );
+	sl[ SL_TITLE ].sl_data = _("Authentication Required ( kerberos error )");
 	subfile( tmpl, sl, 0 );
 	exit( 0 );
     }
@@ -279,9 +280,9 @@ cosign_login_krb5( struct connlist *head, char *cosignname, char *id,
     /* need to get realm out */
     if ( realm == NULL || *realm == '\0' ) {
 	if (( kerror = krb5_get_default_realm( kcontext, &realm )) != 0 ) {
-	    sl[ SL_ERROR ].sl_data = (char *)error_message( kerror );
- 	    sl[ SL_TITLE ].sl_data = "Authentication Required "
-		    "( krb realm error )";
+	    sl[ SL_ERROR ].sl_data = _( (char *)error_message( kerror ) );
+ 	    sl[ SL_TITLE ].sl_data = _("Authentication Required "
+		    "( krb realm error )");
 	    subfile( tmpl, sl, 0 );
 	    exit( 0 );
     	}
@@ -289,23 +290,23 @@ cosign_login_krb5( struct connlist *head, char *cosignname, char *id,
 
     if ( store_tickets ) {
 	if ( mkcookie( sizeof( tmpkrb ), tmpkrb ) != 0 ) {
-	    sl[ SL_ERROR ].sl_data = "An unknown error occurred.";
-	    sl[ SL_TITLE ].sl_data = "Authentication Required (kerberos error)";
+	    sl[ SL_ERROR ].sl_data = _("An unknown error occurred.");
+	    sl[ SL_TITLE ].sl_data = _("Authentication Required (kerberos error)");
 	    subfile( tmpl, sl, 0 );
 	    exit( 0 );
 	}
 
 	if ( snprintf( krbpath, sizeof( krbpath ), "%s/%s",
 		ticket_path, tmpkrb ) >= sizeof( krbpath )) {
-	    sl[ SL_ERROR ].sl_data = "An unknown error occurred.";
-	    sl[ SL_TITLE ].sl_data = "Authentication Required (krbpath error)";
+	    sl[ SL_ERROR ].sl_data = _("An unknown error occurred.");
+	    sl[ SL_TITLE ].sl_data = _("Authentication Required (krbpath error)");
 	    subfile( tmpl, sl, 0 );
 	    exit( 0 );
 	}
 
 	if (( kerror = krb5_cc_resolve( kcontext, krbpath, &kccache )) != 0 ) {
-	    sl[ SL_ERROR ].sl_data = (char *)error_message( kerror );
-	    sl[ SL_TITLE ].sl_data = "Authentication Required (kerberos error)";
+	    sl[ SL_ERROR ].sl_data = _( (char *)error_message( kerror ) );
+	    sl[ SL_TITLE ].sl_data = _("Authentication Required (kerberos error)");
 	    subfile( tmpl, sl, 0 );
 	    exit( 0 );
 	}
@@ -328,8 +329,8 @@ cosign_login_krb5( struct connlist *head, char *cosignname, char *id,
 	    *msg = (char *)error_message( kerror );
             return( COSIGN_CGI_PASSWORD_EXPIRED );
 	} else {
-	    sl[ SL_ERROR ].sl_data = (char *)error_message( kerror );
-	    sl[ SL_TITLE ].sl_data = "Error";
+	    sl[ SL_ERROR ].sl_data = _( (char *)error_message( kerror ) );
+	    sl[ SL_TITLE ].sl_data = _("Error");
 	    subfile( tmpl, sl, 0 );
 	    exit( 0 );
 	}
@@ -338,8 +339,8 @@ cosign_login_krb5( struct connlist *head, char *cosignname, char *id,
     /* verify no KDC spoofing */
     if ( *keytab_path != '\0' ) {
 	if ( strlen( keytab_path ) > MAX_KEYTAB_NAME_LEN ) {
-	    sl[ SL_ERROR ].sl_data = "server configuration error";
-	    sl[ SL_TITLE ].sl_data = "Ticket Verification Error";
+	    sl[ SL_ERROR ].sl_data = _("server configuration error");
+	    sl[ SL_TITLE ].sl_data = _("Ticket Verification Error");
 	    subfile( tmpl, sl, 0 );
 	    exit( 0 );
 	}
@@ -350,8 +351,8 @@ cosign_login_krb5( struct connlist *head, char *cosignname, char *id,
 	krb5_verify_init_creds_opt_set_ap_req_nofail( kvic_opts, 1 );
 
 	if (( kerror = krb5_kt_resolve( kcontext, ktbuf, &keytab )) != 0 ) {
-	    sl[ SL_ERROR ].sl_data = (char *)error_message( kerror );
-	    sl[ SL_TITLE ].sl_data = "KT Resolve Error";
+	    sl[ SL_ERROR ].sl_data = _( (char *)error_message( kerror ) );
+	    sl[ SL_TITLE ].sl_data = _("KT Resolve Error");
 	    subfile( tmpl, sl, 0 );
 	    exit( 0 );
 	}
@@ -363,8 +364,8 @@ cosign_login_krb5( struct connlist *head, char *cosignname, char *id,
 			KRB5_NT_SRV_HST, &sprinc );
 	}
 	if ( kerror != 0 ) {
-	    sl[ SL_ERROR ].sl_data = (char *)error_message( kerror );
-	    sl[ SL_TITLE ].sl_data = "Server Principal Error";
+	    sl[ SL_ERROR ].sl_data = _( (char *)error_message( kerror ) );
+	    sl[ SL_TITLE ].sl_data = _("Server Principal Error");
 	    subfile( tmpl, sl, 0 );
 	    exit( 0 );
 	}
@@ -378,8 +379,8 @@ cosign_login_krb5( struct connlist *head, char *cosignname, char *id,
 	    } else {
 		fprintf( stderr, "ticket verify error for user %s", id );
 	    }
-	    sl[ SL_ERROR ].sl_data = (char *)error_message( kerror );
-	    sl[ SL_TITLE ].sl_data = "Ticket Verify Error";
+	    sl[ SL_ERROR ].sl_data = _( (char *)error_message( kerror ) );
+	    sl[ SL_TITLE ].sl_data = _("Ticket Verify Error");
 	    subfile( tmpl, sl, 0 );
 	    krb5_free_principal( kcontext, sprinc );
 	    exit( 0 );
@@ -405,15 +406,15 @@ cosign_login_krb5( struct connlist *head, char *cosignname, char *id,
 
     if ( store_tickets ) {
 	if (( kerror = krb5_cc_initialize( kcontext, kccache, kprinc )) != 0 ) {
-	    sl[ SL_ERROR ].sl_data = (char *)error_message( kerror );
-	    sl[ SL_TITLE ].sl_data = "CC Initialize Error";
+	    sl[ SL_ERROR ].sl_data = _( (char *)error_message( kerror ) );
+	    sl[ SL_TITLE ].sl_data = _("CC Initialize Error");
 	    subfile( tmpl, sl, 0 );
 	    exit( 0 );
 	}
 	if (( kerror = krb5_cc_store_cred( kcontext, kccache, &kcreds ))
 		!= 0 ) {
-	    sl[ SL_ERROR ].sl_data = (char *)error_message( kerror );
-	    sl[ SL_TITLE ].sl_data = "CC Storing Error";
+	    sl[ SL_ERROR ].sl_data = _( (char *)error_message( kerror ) );
+	    sl[ SL_TITLE ].sl_data = _("CC Storing Error");
 	    subfile( tmpl, sl, 0 );
 	    exit( 0 );
 	}
@@ -428,9 +429,9 @@ cosign_login_krb5( struct connlist *head, char *cosignname, char *id,
     if ( cosign_login( head, cookie, ip_addr, cosignname, realm, 
 	    ( store_tickets ? krbpath : NULL )) < 0 ) {
 	fprintf( stderr, "cosign_login_krb5: login failed\n") ;
-	sl[ SL_ERROR ].sl_data = "We were unable to contact the "
-		"authentication server. Please try again later.";
-	sl[ SL_TITLE ].sl_data = "Error: Please try later";
+	sl[ SL_ERROR ].sl_data = _("We were unable to contact the "
+		"authentication server. Please try again later.");
+	sl[ SL_TITLE ].sl_data = _("Error: Please try later");
 	subfile( tmpl, sl, 0 );
 	exit( 0 );
     }
diff --git a/cgi/logout.c b/cgi/logout.c
index 39bf26f..7d8bac3 100755
--- a/cgi/logout.c
+++ b/cgi/logout.c
@@ -22,6 +22,7 @@
 #include "cosigncgi.h"
 #include "network.h"
 #include "subfile.h"
+#include "lang.h"
 
 extern char	*cosign_version;
 char		*cosign_host =_COSIGN_HOST;
@@ -132,6 +133,8 @@ main( int argc, char *argv[] )
     struct connlist	*head;
     char		*script;
 
+    init_locale();
+
     if ( argc == 2 && ( strncmp( argv[ 1 ], "-V", 2 ) == 0 )) {
 	printf( "%s\n", cosign_version );
 	exit( 0 );
@@ -152,24 +155,24 @@ main( int argc, char *argv[] )
     }
 
     if (( ip_addr = getenv( "REMOTE_ADDR" )) == NULL ) {
-        sl[ SL_TITLE ].sl_data = "Error: Server Error";
-        sl[ SL_ERROR ].sl_data = "REMOTE_ADDR not set";
+        sl[ SL_TITLE ].sl_data = _("Error: Server Error");
+        sl[ SL_ERROR ].sl_data = _("REMOTE_ADDR not set");
         tmpl = ERROR_HTML;
         subfile( tmpl, sl, 0 );
 	exit( 0 );
     }
 
     if (( script = getenv( "SCRIPT_NAME" )) == NULL ) {
-        sl[ SL_TITLE ].sl_data = "Error: Server Error";
-        sl[ SL_ERROR ].sl_data = "SCRIPT_NAME not set";
+        sl[ SL_TITLE ].sl_data = _("Error: Server Error");
+        sl[ SL_ERROR ].sl_data = _("SCRIPT_NAME not set");
         tmpl = ERROR_HTML;
         subfile( tmpl, sl, 0 );
 	exit( 0 );
     }
 
     if (( method = getenv( "REQUEST_METHOD" )) == NULL ) {
-	sl[ SL_TITLE ].sl_data = "Error: Server Error";
-        sl[ SL_ERROR ].sl_data = "REQUEST_METHOD not set";
+	sl[ SL_TITLE ].sl_data = _("Error: Server Error");
+        sl[ SL_ERROR ].sl_data = _("REQUEST_METHOD not set");
 	tmpl = ERROR_HTML;
 	subfile( tmpl, sl, 0 );
 	exit( 0 );
@@ -195,14 +198,14 @@ main( int argc, char *argv[] )
 	    /* if url check fails, default logout URL will be used */
 	}
 
-	sl[ SL_TITLE ].sl_data = "Logout Requested";
+	sl[ SL_TITLE ].sl_data = _("Logout Requested");
 	subfile ( tmpl, sl, 0 );
 	exit( 0 );
     }
 
     if (( cgi = cgi_init()) == NULL ){
-        sl[ SL_TITLE ].sl_data = "Error: Server Error";
-        sl[ SL_ERROR ].sl_data = "cgi_init failed";
+        sl[ SL_TITLE ].sl_data = _("Error: Server Error");
+        sl[ SL_ERROR ].sl_data = _("cgi_init failed");
         tmpl = ERROR_HTML;
         subfile( tmpl, sl, 0 );
 	exit( 0 );
@@ -228,7 +231,7 @@ main( int argc, char *argv[] )
      * screen again.
      */
     if ( cl[ CL_VERIFY ].cl_data == NULL ) {
-	sl[ SL_TITLE ].sl_data = "Logout Requested (again?)";
+	sl[ SL_TITLE ].sl_data = _("Logout Requested (again?)");
 	subfile ( tmpl, sl, 0 );
 	exit( 0 );
     }
@@ -259,10 +262,10 @@ main( int argc, char *argv[] )
 
     /* setup conn and ssl and hostlist to tell cosignd we're logged out */
     if (( head = connlist_setup( cosign_host, cosign_port )) == NULL ) {
-        sl[ SL_TITLE ].sl_data = "Server Configuration Error";
-        sl[ SL_ERROR ].sl_data = "We were unable to contact the "
+        sl[ SL_TITLE ].sl_data = _("Server Configuration Error");
+        sl[ SL_ERROR ].sl_data = _("We were unable to contact the "
 		"authentication server.  Please quit your web browser "
-		"to complete logout.";
+		"to complete logout.");
         tmpl = ERROR_HTML;
         subfile( tmpl, sl, 0 );
         exit( 0 );
@@ -272,10 +275,10 @@ main( int argc, char *argv[] )
     SSL_library_init();
 
     if ( cosign_ssl( cryptofile, certfile, cadir, &ctx )) {
-        sl[ SL_TITLE ].sl_data = "Server Configuration Error";
-        sl[ SL_ERROR ].sl_data = "Failed to initialise connections to "
+        sl[ SL_TITLE ].sl_data = _("Server Configuration Error");
+        sl[ SL_ERROR ].sl_data = _("Failed to initialise connections to "
 		"the authentication server. Please quit your browser to "
-		"complete logout.";
+		"complete logout.");
         tmpl = ERROR_HTML;
         subfile( tmpl, sl, 0 );
         exit( 0 );
@@ -297,3 +300,5 @@ main( int argc, char *argv[] )
     printf( "Location: %s\n\n", sl[ SL_URL ].sl_data );
     exit( 0 );
 }
+
+// vim: noet ts=8 sw=4
diff --git a/cgi/subfile.c b/cgi/subfile.c
index a0910cc..c7e682f 100644
--- a/cgi/subfile.c
+++ b/cgi/subfile.c
@@ -30,12 +30,14 @@
 
 int _do_macro_include ( char *, struct subfile_list * );
 void do_macro_include ( char *, struct subfile_list * );
+void do_macro_gettext( char *);
 char * str_replace(char *, char *, char *);
 size_t macro_process ( char *, size_t, struct subfile_list *, char *);
 
 #ifdef	_DEBUG
 
 void stub_do_macro_include ( char *, struct subfile_list * );
+void stub_do_macro_gettext( char *);
 
 #endif
 
@@ -165,6 +167,12 @@ macro_process ( char *str, size_t size, struct subfile_list *sl, char *filename
 #else
 	stub_do_macro_include(incfile, sl);
 #endif
+    } else if ( strcmp(cmd, "_") == 0 ) {
+#ifndef _DEBUG
+	do_macro_gettext(arg);
+#else
+	stub_do_macro_gettext(arg);
+#endif
     } else {
 	p = str;
     }
@@ -256,6 +264,30 @@ _do_macro_include ( char *incfile, struct subfile_list *sl )
     return ret;
 }
 
+    void
+do_macro_gettext( char *text)
+{
+    int		len;
+    char 	*from, *p;
+    char	*to;
+
+    from = strdup(text);
+    p = from;
+    len = strlen(from);
+
+    if ( (*from == '"' || *from == '\'') && *(from+len-1) == *from ) {
+	*(from+len-1) = '\0';
+	from++;
+	from = str_replace(from, "\\'", "'");
+	from = str_replace(from, "\\\"", "\"");
+    }
+    to = dgettext("template", from);
+    if (strcmp(from, to) == 0)
+	to = _(from);
+    printf ("%s", to);
+    if (p)
+	free(p);
+}
 
 /*
  * Substitute template file with multiple language support.
@@ -436,6 +468,11 @@ stub_do_macro_include( char *str, struct subfile_list *sl )
     printf(">> include: %s\n", str);
 }
 
+    void
+stub_do_macro_gettext( char *str )
+{
+    printf(">> gettext: %s\n", str_replace(str, "\n", "."));
+}
 
     void
 test_macro_process()
diff --git a/html/js/js_locale.js b/html/js/js_locale.js
new file mode 100644
index 0000000..15985fc
--- /dev/null
+++ b/html/js/js_locale.js
@@ -0,0 +1,48 @@
+var Localization = {
+	"Please enter your login and password.": {
+		"zh": "请输入您的用户名和口令。" },
+
+	"Please input your email address into username field.": {
+		"zh": "请在用户名输入框输入您的邮件地址。" },
+
+	"default": "en"
+};
+
+function setLocale(lang) {
+	if (!lang) lang = "en";
+	Localization.default = lang;
+}
+
+(function() {
+	function extend(destination, source) {
+		for (var property in source)
+			destination[property] = source[property];
+			return destination;
+	}
+
+	extend(String.prototype, (function() {
+		function localize(lang) {
+			var code;
+			var s;
+			if (code = /^([0-9]+)\s*:/.exec(this)) code = code[1];
+			if (Localization) {
+				s= Localization[code] ? Localization[code] : Localization[this];
+				if (!s) return this;
+				if (s instanceof Object) {
+					if (!lang) lang = Localization.default;
+					return s[lang] ? s[lang] : s["en"];
+				}
+				return s;
+			}
+			return this;
+		}
+
+		return {
+			l: localize,
+			_: localize,
+			localize: localize
+		};
+	})());
+})();
+
+// vim: noet ts=4 sw=4
diff --git a/locale/xgettext_format.rb b/locale/xgettext_format.rb
new file mode 100755
index 0000000..72b8ff3
--- /dev/null
+++ b/locale/xgettext_format.rb
@@ -0,0 +1,133 @@
+#!/usr/bin/env ruby
+# Extract l10n messages from arbitrary file and convert to C format.
+require 'optparse'
+require 'fileutils'
+
+MARK_START = "$!_("
+MARK_END = ")"
+GETTEXT_START = "_("
+GETTEXT_END = ")"
+
+options = {}
+OptionParser.new do |opts|
+  opts.banner = "Usage: xgettext_format.rb [options] file"
+
+  options[:verbose] = false
+  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
+    options[:verbose] = v
+  end
+
+  opts.on( '-h', '--help', 'Display this screen' ) do
+    puts opts
+    exit
+  end
+
+  options[:force] = false
+  opts.on( '-f', '--force', 'Overwrite if output file already exists.' ) do
+    options[:force] = true
+  end
+
+  options[:mstart] = MARK_START
+  options[:mend] = MARK_END
+  opts.on( '-m', '--markstart WORD', 'Mark for l10n start' ) do |word|
+    options[:mstart] = word
+  end
+  opts.on( '-M', '--markend WORD', 'Mark for l10n end' ) do |word|
+    options[:mend] = word
+  end
+
+  options[:out] = nil
+  opts.on("-o", "--out File", "Output to file") do |file|
+    options[:out] = file
+  end
+end.parse!
+
+case ARGV.length
+when 2
+  options[:in] = ARGV[0]
+  options[:out] = ARGV[1]
+when 1
+  options[:in] = ARGV[0]
+else
+  puts opts
+  exit
+end
+
+def strip_l10n_msg(line, flags)
+  msg = ""
+  while true
+    if ! flags[:open]
+      start = line.index(flags[:mstart])
+      if start
+        start += flags[:mstart].length
+        msg += GETTEXT_START
+        line = line[start..-1]
+        flags[:open] = true
+      else
+        return msg
+      end
+    end
+    # flags[:open] == true
+    i = 0
+    in_str = false
+    escape = false
+    line.each_byte do |ch|
+      if not in_str
+        if ch.chr == '"'
+          in_str = true
+        elsif ch.chr !~ /\s/
+          if line[i...i+flags[:mend].length] == flags[:mend]
+            flags[:open] = false
+            msg += "#{GETTEXT_END}; "
+            i += flags[:mend].length
+            break
+          else
+            raise Exception, "String starts with unkonwn CHAR:#{ch.chr}/#{i}, LINE:#{line[i..-1]}, MSG:#{msg}"
+          end
+        end
+      else
+        if escape
+          escape = false
+        elsif ch.chr == "\\"
+          escape = true
+        elsif ch.chr == '"'
+          in_str = false
+        end
+      end
+      msg += ch.chr
+      i += 1
+    end
+    line = line[i..-1]
+    break if line.length == 0
+  end
+  return msg
+end
+
+if options[:out]
+  if not options[:force] and File.exists?(options[:out])
+      $stderr.puts "Error: File #{options[:out]} already exists!"
+      exit
+  end
+  FileUtils.makedirs File.dirname(options[:out])
+  fout = File.open(options[:out], "w")
+else
+  fout = $stdout
+end
+
+$stderr.puts "Extract l10n messages from #{options[:in]} to #{options[:out]}." if options[:verbose]
+
+File.open(options[:in]) do |file|
+  flags = {}
+  flags[:mstart] = options[:mstart]
+  flags[:mend] = options[:mend]
+  flags[:open] = false
+
+  file.each_line do |line|
+    newline = strip_l10n_msg(line, flags)
+    fout.puts newline
+  end
+end
+
+fout.close if fout != $stdout
+
+# vim: et ts=2 sw=2 paste
-- 
tg: (698b5a5..) t/message_localize (depends on: t/include_macro_for_templates t/factor_ldap t/factor_invite t/auth_log_for_fail2ban)
